//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIA.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Question
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Question()
        {
            this.Choices = new HashSet<Choice>();
            this.QuestionHistories = new HashSet<QuestionHistory>();
        }
    
        public int questionID { get; set; }
        public int questionTypeID { get; set; }
        public int sectionID { get; set; }
        public string questionNumber { get; set; }
        public string labelEN { get; set; }
        public string labelFR { get; set; }
        public string helpTextEN { get; set; }
        public string helpTextFR { get; set; }
        public string noteEN { get; set; }
        public string noteFR { get; set; }
        public Nullable<int> minValue { get; set; }
        public Nullable<int> maxValue { get; set; }
        public int position { get; set; }
        public System.DateTime dateCreated { get; set; }
        public Nullable<System.DateTime> dateModified { get; set; }
        public bool isRequired { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Choice> Choices { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<QuestionHistory> QuestionHistories { get; set; }
        public virtual QuestionType QuestionType { get; set; }
        public virtual Section Section { get; set; }
    }
}
